#!/bin/bash
#
# Squish a CM otapackage for distribution
# cyanogen
#

. $ANDROID_BUILD_TOP/vendor/cm/tools/functions

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
	exit 1
fi

if [ ! -f "$OTAPACKAGE" ]; then
	echo -e $CL_RED"$OTAPACKAGE doesn't exist!"$CL_RST;
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/cm/tools/opticharger
QUIET=-q
REPACK=$OUT/repack.d
if [ -d $REPACK ]; then
	printf "Sanitizing environment..."
	rm -rf $REPACK
	echo
fi

# Unpack the otapackage and opticharge all apks
mkdir -p $REPACK/ota
(
cd $REPACK/ota
printf "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel
cp $REPACK/ota/system/framework/framework-res.apk .
cp $REPACK/ota/system/app/*.apk .

# Do optimization in parallel
find ./ -name \*.apk | $XARGS $OPTICHARGER

# Move optimized apks to repack directory
mv -f $REPACK/parallel/framework-res.apk $REPACK/ota/system/framework/framework-res.apk
mv -f $REPACK/parallel/*.apk $REPACK/ota/system/app/

# Optimize & move "extras" apps
if [ -d $REPACK/ota/extras/app ]; then
	cp $REPACK/ota/extras/app/*.apk .
	find ./ -name \*.apk | $XARGS $OPTICHARGER
	mv -f $REPACK/parallel/*.apk $REPACK/ota/extras/app/
fi

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# Pack it up
printf "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip .; mv -f $REPACK/update.zip $OTAPACKAGE )
echo
printf "Cleaning up..."
rm -rf $REPACK
echo

exit 0
